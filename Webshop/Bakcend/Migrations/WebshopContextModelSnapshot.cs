// <auto-generated />
using Bakcend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bakcend.Migrations
{
    [DbContext(typeof(WebshopContext))]
    partial class WebshopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Bakcend.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Price")
                        .HasColumnType("int(50)");

                    

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                   

                    b.ToTable("merchant", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)");

                    b.Property<int>("Extant")
                        .HasColumnType("int(100)");

                    b.Property<int>("Revenue")
                        .HasColumnType("int(255)");

                    b.Property<int>("Sold")
                        .HasColumnType("int(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("quantity", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MerchantId" }, "MerchantsId");

                    b.ToTable("user", (string)null);
                });

            

            modelBuilder.Entity("Bakcend.Models.User", b =>
                {
                    b.HasOne("Bakcend.Models.Merchant", "Merchant")
                        .WithMany("User")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_1");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Bakcend.Models.Merchant", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Bakcend.Models.Quantity", b =>
                {
                    b.Navigation("Merchants");
                });
#pragma warning restore 612, 618
        }
    }
}
